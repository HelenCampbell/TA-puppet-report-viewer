{"global_settings_builder": {"global_settings": {"customized_settings": [{"default_value": "puppet.company.com", "value": "puppet.c.splunk-217321.internal", "label": "Puppet DB Server", "required": true, "internal_name": "", "format_type": "text", "type": "text", "name": "puppet_db_server", "help_string": "Hostname of PuppetDB server, usually the same as the Puppet Enterprise console."}, {"default_value": "", "value": "", "label": "Puppet Auth Token", "required": true, "internal_name": "", "format_type": "password", "type": "password", "name": "auth_token", "help_string": "https://puppet.com/docs/pe/2019.0/rbac_token_auth_intro.html#generate-a-token-using-the-api-endpoint"}, {"default_value": "splunk.company.com", "value": "splunk-dev.c.splunk-217321.internal", "label": "Splunk Server", "required": true, "internal_name": "", "format_type": "text", "type": "text", "name": "splunk_server", "help_string": "Hostname of the Splunk HEC endpoint"}, {"default_value": "", "value": "", "label": "Splunk HEC Token", "required": true, "internal_name": "", "format_type": "password", "type": "password", "name": "splunk_hec_token", "help_string": "HEC Token with puppet:detailed sourcetype - https://docs.splunk.com/Documentation/Splunk/latest/Data/UsetheHTTPEventCollector"}, {"default_value": "", "value": "", "label": "PE Console Hostname", "required": false, "internal_name": "", "format_type": "text", "type": "text", "name": "pe_console", "help_string": "User facing hostname for PE Console, defaults to PuppetDB value if none provided"}]}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "progress": 1.0, "status": "job_finished", "validation_id": "v_1551668928_75"}, "field_extraction_builder": {"puppet:summary": {"data_format": "json", "is_parsed": true}, "puppet:bolt": {"data_format": "json", "is_parsed": true}, "puppet:detailed": {"data_format": "json", "is_parsed": true}}, "basic_builder": {"description": "Add-on meant to work with the Splunk HEC Puppet Forge Module. Provides sourcetypes, an actionable alert, and example dashboards around displaying and generating Puppet Report data from a Puppet installation.", "large_icon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAD0UlEQVR4Xu2cT0gUcRTHv292FTMjCMzdQDC8GQpRRBeTDhEVBTmLEELQpT+H6tQtaA91KgjqlIieOrjlJl0DvZd0yFO3pMO4EWZibdruvNixthJnfj93frqz69vrvt+beZ/5/t7v937zdgny8SXAzHESPv4EBJBCHQJIAIVLIFoK4idowD40hLuUYnQeTAPIb+o1KnCuB2g88QhkXa/A/waG8Afqd/ZvYMCWmAogEzmIRUHBGAWQSmaioLAKYgZjWcG5EURWwJ61jpM0c55sp9kveE7DQk9yCqBjAmgdAgJIFKTYKAogARS4ACn3QaIgVS3mLfMcSJlAAAUczkktptqO1vE+yFRdze4cQEfJdmZNuQzrJ0LVfDmUFbjubUrN3Q8bnInxUQS0GhfzW5B7ivpzn0wEWqmP6AJapbQIdi+TnRurNMCw4/QAAYR0aRUy9DnQdhaxWAZAo9ojF8GYwoxzktJw1fZmLbQAmb3k7xm0WsC+BuiQln+GA+t7F51fWNCyN2RUNUDeBCop81niDmJ0CyDf04D/Yi0W72Ipd89Q/EAHCnQcBT9/VQX056b4ReIImMYA6tALnH0D0hv/j5WLYUo51yINyFPTKJqwK/EQlnV1w0GGGcA8RLZzJfKAymqaaO1FMT4Boj1h4tYeW2uAyqCyidIJZF9w/aaNwd+wVgF50y6bnNZe5SplVdOAxpNvQHS40ti1xgkgBSYBJIC0ZpKvkShIFCQKCkdAFBSOX63mIO91dXdyGkQHwxGoQwVxBjsQS7wDUaeUGmseMI8nzgDWcxCaNlU55aKvRqp5zrS2IB57CljntgRMLQHi7N4TQCwLUIsajvcW95vaTteCR8meuxHJ8yBOI46exDBAgwDF1SGV4Lg3yc49VtuasajakauXiOPJ9wC1a4XiujNYzvfR4NcvWvaGjLQAeYfrJl/7dLddAqyh4J7FcpIowHVHKJXzPRY1xGJdN3qAtqTLde39laYT50A8SP25yc2EEOQ7ooCY4bov0fzzIp2eX6wWnNJ1oweIeclLxKncSDXB/N0FaPziUNlhZiQSb0pNY2XFpgvzH424NOAkQgriWRScThpA0UBcxlwYAsSl9jtVY4G1fVvwmPOwnZ2+jy0DC/HkpHTa+xCSTntpA5ZG8sCsr1zmRUFqBeGzs9uXcjss/Ei+AqjX/0nUdSO5t8yr9i+x7bvMG9mW1bWCTBASQAqKAqiuAT0AkW8nqIkJBmCW+p0uQ76MudErVk0fufrcfjU66VUktQCpnNTz9wJIlRnlP8yCCYmCREHhMmRJQb8A+yr0r6b/T+kAAAAASUVORK5CYII=", "build_no": 6, "theme": "#000000", "appname": "TA-puppet-report-viewer", "tab_version": "2.2.0", "tab_build_no": "12", "author": "Puppet, Inc.", "friendly_name": "Puppet Report Viewer", "version": "1.3.4", "visible": true, "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAB90lEQVRYR+2XTS8DYRSFzx0NyqKKREuiaGMlEj+BZRdCJSqSxsIfsLGvjZUfYSeRjAVhSSJprIhoLJQFG6U+Ihrx0elcmYo2w5hOebUj+i4nN5nnPXPvuWcINjrMLJGNePA3gFj2LIGkCevK8SmFkt3W67+uNFTI5kDMANTPd6KawrOyKsQMVkdo7HL1HYA3XH48NZ5Ugd4U0BTicTgv1vKKvDT7odYfVkghK7PDZzhIBigKxUq1WY2gKcu9Yh1IT1EoffMTKJFAGscdFCVI46md70IZAwGEKIqvlN6WXtTXxgFy6ABYXUT8YpqiRnZhjipkdbDsTYAQAEh/CVWJIIvHIghXFL7azluKqOXKK55ZAPOAZpgfwEy7GFs0dj4kHChnEMvuTjjqdgCp3XIP8S8C5aBk7x6IBqpAXylQVch0YOQmH+CMgaij4j3EctsMSFp4G/sSjugp4ygc6PceA/Dp/UcLduowwM+meKTe0uj1rqkPsbY6tJxoduZA6HN1QWpI6FXR4gqWEE9GhK2O0jN1/n73yGSDFE7FSvho+jVotDpKB9I+D28CD2GbxA8+gzsZoMGyBLRcc06iJrue11aSepBx7Be0/vd/HZQNIZMqhPzGVj+ea48qqJCBCRBJFQKyMsBl7SEbAFlB+K0aISFfJJwtgV4Bo7J9EBX6PmQAAAAASUVORK5CYII="}, "alert_action_builder": {"modular_alerts": [{"description": "Generates a detailed report from a puppet:summary event", "uuid": "1f0457025dbb43979505cabeb469594a", "parameters": [{"default_value": "", "value": "4e5d808f-60fb-4edc-ac1f-f4d3ae4b1e68", "label": "Transaction UUID", "required": false, "format_type": "text", "type": "", "name": "transaction_uuid", "help_string": "Used for testing, don't use in deployments."}], "largeIcon": "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", "short_name": "generate_detailed_report", "label": "Generate detailed report", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAACC0lEQVRYR+2YTWsTURiFz0lnmiYoYrRpK0oX/RWiSJduRE1DJaIrd4L/pTtXioJFCaYVBEEouNEfUAqlGzeKtYmlXZQaDc49kpREG3JzJ01ipphZDu9973PP+3E/CMunQuo86GcgxGw2jf+VIM/c9qbTLoQBrUDLk7MwXAE54vQjXObc5genXQiDYwwklQAEtUUSPsCzjQUPRCG/PM1ru5+qECqkL4He+yHQoaSOnELSI8SwVwuTdA6IzQ82ZO1K1gS3mS0+D1HVTpPelD20B5kM54orzhkdBj0CqoYRZfDXRWZKq91A2YHeII5KKg2Mtfb/o5LAqL8A4CrAAz/SdyjIMFt6e1QoK1AYh1o6eQY6UQBxpQFVDR90DzL2vS3QR85/22o1R1dAdYd6OfUOMc6GWcRBpzf3eXPrYf+A8pPj8Pj0UPja0fUbqJY+y+kZGG8NRMKp1D8BepW6ABPfAJgcArVSQEOFHImhF+kZ+BFJai2eOo2x5GMQ1/80yDYr6HeVRaYx1pRJJBeb9rN9UA9gaN86vJ/rvLHzuaNOrTxGgfGUVfgRLw5goSlMZZjgFrPF185eZDE4RsePji6K2odMrhtl6oL1RiGju8x+fXbUMP09LjxQ5A75kbsGDYGaMlLNVSZ8AVR/bIgDnGgMGchjQ7sS+j+BClPTIO5ACvGkV3nCXOu9qdPe9BvCCFQ0gPAA5gAAAABJRU5ErkJggg==", "code": "\n# encoding = utf-8\nimport json\nimport requests\nfrom dateutil import parser\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\n\ndef get_certname_facts(certname, server, token):\n  # setup the headers\n  headers = {'X-Authentication': token}\n  #setup the url\n  url = 'https://{}:8081/pdb/query/v4'.format(server)\n\n  facts = {}\n  query_string = {}\n  query_string['query'] = \"facts [name, value] { certname = \\\"%s\\\"}\" % certname\n  \n  certname_facts = json.loads(requests.post(url, json=query_string, headers=headers, verify=False).text)\n\n  facts['facts'] = {}\n\n  for f in certname_facts:\n    facts['facts'][f['name']] = f['value']\n\n  return facts\n\n\ndef get_resource_events(uuid, server, token):\n  \n  # setup the headers\n  headers = {'X-Authentication': token}\n  #setup the url\n  url = 'https://{}:8081/pdb/query/v4'.format(server)\n\n  query_string = {}\n  query_string['query'] = \"reports[hash, status, puppet_version, report_format, catalog_uuid, job_id, cached_catalog_status, configuration_version, environment, corrective_change, noop, noop_pending, certname, transaction_uuid, code_id, resource_events, producer_timestamp, producer, start_time, end_time, receive_time, logs] { transaction_uuid = \\\"%s\\\" }\" % uuid\n  \n  resource_events = json.loads(requests.post(url, json=query_string, headers=headers, verify=False).text)\n\n  return resource_events\n\ndef submit_to_splunk(detailed_report, splunk, hec):\n  # setup the headers\n  headers = {\"Authorization\" : 'Splunk {} '.format(hec) }\n  #setup the url\n  url = 'https://{}:8088/services/collector'.format(splunk)\n  \n  # cleanup start_time\n  \n  ptime = parser.parse(detailed_report['start_time'])\n  epoch = ptime.strftime('%s')\n\n  report = {\n    'host': detailed_report['certname'],\n    'time': epoch,\n    'event': detailed_report\n  }\n\n  requests.post(url, json=report, headers=headers, verify=False)\n\ndef is_json(myjson):\n    try:\n        json_object = json.loads(myjson)\n    except ValueError as e:\n        return False\n    return True\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the setup parameters and prints them to the log\n    puppet_db_server = helper.get_global_setting(\"puppet_db_server\")\n    helper.log_info(\"puppet_db_server={}\".format(puppet_db_server))\n    auth_token = helper.get_global_setting(\"auth_token\")\n    helper.log_info(\"auth_token={}\".format(auth_token))\n    splunk_server = helper.get_global_setting(\"splunk_server\")\n    helper.log_info(\"splunk_server={}\".format(splunk_server))\n    splunk_hec_token = helper.get_global_setting(\"splunk_hec_token\")\n    helper.log_info(\"splunk_hec_token={}\".format(splunk_hec_token))\n    pe_console = helper.get_global_setting(\"pe_console\")\n    helper.log_info(\"pe_console={}\".format(pe_console))\n\n    # The following example gets the alert action parameters and prints them to the log\n    transaction_uuid = helper.get_param(\"transaction_uuid\")\n    helper.log_info(\"transaction_uuid={}\".format(transaction_uuid))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    #helper.log_info(\"Alert action generate_detailed_report started.\")\n    \n    events = helper.get_events()\n    for event in events:\n        event_dict = event\n\n    #helper.log_info(event_dict)\n\n    # attempt to parse the event store to see if it's json\n    if is_json(event_dict[\"_raw\"]):\n        event_content = json.loads(event_dict[\"_raw\"])\n        event_uuid = event_content['transaction_uuid']\n        event_puppetdb_callback_hostname = event_content['puppetdb_callback_hostname']\n    else:\n        event_uuid = None\n        event_puppetdb_callback_hostname = \"\"\n\n    uuid = helper.get_param(\"transaction_uuid\") or event_uuid\n\n    puppetdb_callback_hostname = helper.get_param(\"puppetdb_callback_hostname\") or event_puppetdb_callback_hostname\n\n    #helper.log_info('uuid={}'.format(uuid))\n\n    puppet_db_server = helper.get_global_setting(\"puppet_db_server\")\n    auth_token = helper.get_global_setting(\"auth_token\")\n    splunk_server = helper.get_global_setting(\"splunk_server\")\n    hec_token = helper.get_global_setting(\"splunk_hec_token\")\n\n\n    pe_console = helper.get_global_setting(\"pe_console\") or puppet_db_server\n\n    resource_response = get_resource_events(uuid, puppet_db_server, auth_token)\n\n    detailed_report = resource_response[0]\n    \n    certname = detailed_report['certname']\n    \n    facts= get_certname_facts(certname, puppet_db_server, auth_token)\n\n    detailed_report['facts'] = facts['facts']\n\n    detailed_report['url'] = 'https://{}/#/inspect/report/{}/events'.format(pe_console, detailed_report[\"hash\"])\n\n    detailed_report[\"puppetdb_callback_hostname\"] = puppetdb_callback_hostname\n\n    submit_to_splunk(detailed_report, splunk_server, hec_token)\n\n    helper.writeevents(host=\"localhost\", source=\"localhost\")\n\n    return 0"}]}, "sourcetype_builder": {"puppet:summary": {"metadata": {"data_input_name": null, "extractions_count": 0, "cims_count": 0, "event_count": 0}}, "puppet:bolt": {"metadata": {"data_input_name": null, "extractions_count": 0, "cims_count": 0, "event_count": 0}}, "puppet:detailed": {"metadata": {"data_input_name": null, "extractions_count": 0, "cims_count": 0, "event_count": 0}}}}