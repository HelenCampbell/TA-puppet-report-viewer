{"global_settings_builder": {"global_settings": {"customized_settings": [{"help_string": "Hostname of Puppet DB Server, usually same as PE Console hostname in simple installation configurations.", "required": true, "format_type": "text", "default_value": "puppet.company.com", "value": "puppet.c.splunk-217321.internal", "name": "puppet_db_server", "internal_name": "", "type": "text", "label": "Puppet DB Server"}, {"help_string": "", "required": true, "format_type": "password", "default_value": "", "value": "", "name": "auth_token", "internal_name": "", "type": "password", "label": "Puppet Auth Token"}, {"help_string": "Splunk server / indexer where HEC is located", "required": true, "format_type": "text", "default_value": "splunk.company.com", "value": "splunk.c.splunk-217321.internal", "name": "splunk_server", "internal_name": "", "type": "text", "label": "Splunk Server"}, {"help_string": "", "required": true, "format_type": "password", "default_value": "", "value": "", "name": "hec_token", "internal_name": "", "type": "password", "label": "Splunk HEC Token"}, {"help_string": "User facing hostname for PE Console, defaults to PuppetDB value if none provided.", "required": false, "format_type": "text", "default_value": "", "value": "", "name": "pe_console", "internal_name": "", "type": "text", "label": "PE Console Hostname"}]}}, "field_extraction_builder": {"puppet:detailed": {"is_parsed": true, "data_format": "json"}, "puppet:summary": {"is_parsed": true, "data_format": "json"}, "bolt:apply": {"is_parsed": true, "data_format": "json"}}, "sourcetype_builder": {"puppet:detailed": {"metadata": {"cims_count": 0, "event_count": 0, "data_input_name": null, "extractions_count": 0}}, "puppet:summary": {"metadata": {"cims_count": 0, "event_count": 0, "data_input_name": null, "extractions_count": 0}}, "bolt:apply": {"metadata": {"cims_count": 0, "event_count": 0, "data_input_name": null, "extractions_count": 0}}}, "validation": {}, "alert_action_builder": {"modular_alerts": [{"parameters": [], "largeIcon": "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", "short_name": "build_detailed_report", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAD70lEQVRYR+2XTWwbRRTH338mm6ikgiaKibDj7G4O3Ir4uCCBoIcCgkpw6QkhJIREWz5Ei6hAQiBuHEqpgAOH3uidXoqgoB6QeuBDFVTADbzrjQW4br2lTVyXnZ2HnrWOjOPYTYnjHvouttazMz//3+dgYWGBqb9tK5VKfw9Ys2E/Q4DEsh1t9gkAKvs+GiBmrgP4kYhARHcCKI4SSJT5KgiCx4lI+75/BMArowY6FQTBkwLked4hpdS+UQJJDP1GRJ9mLnsCwP0CZIyZjqIo3rCoHbBRK6j7rbHWHgjD8CMiagf8UNkEqGdKM/MWIhoDcMEYczSKoreJKB0qjbjHdV0J5F72AIC9AKaJ6LK19sNyufzusJWSFO9p+Xx+xnGc/Uqp1wFMMPN5Zj7GzCe6X0jTNK1UKt9shHprAsnmuVxu6+Tk5EEA4i6xJoCl7oOZuREEgTd0oOyACdd139Jat6FWncvMy0EQbN0sIPJ9/y4AZ9c68CbQDaeQ67r3aq3P3BAuKxQKc47jvKSUenPkQPl8ft5xnDe01i9mM5NU9ahH2l8Jw7DV+zoMhUKh4DjOTPtZGIY/zc3NbddaPwRAM3Ol2Wyerlar59pr+hXGouM4B7XWe4honJlDZj7CzL93AwEwYRie7HruuK77AoBd7efMfIqIdiilHpOpQvYkopPW2s+iKDrdqnOe532yhisKAHYQkdSXc9ba58rl8hfrqDUTnufJXLW3A+gKgC0yjsqzTHVp7r8YY95ZXFw8Ic31n16HMLPORpHFJEn2VCqVL9cBI0tbQB1zVRtAGvRlIrpV3NYBdqZerz86cPwwxjwSRZFIPegy0M27CihN04+J6DgRXSWiOwA8A+CpTDFjjHl+Zchn5u+SJHlNa6201vsB7JYTrLVTYRheXKc6PRWK43hbHMftcUcXi8WdY2NjhwBsz5T6vA0kw9fXXTP1yxnE9d46VilUKpX+k0Tz8/NTSimJs2dFJWvtH51AGz3kDwSSP+z7/vtEdECuXcx8tfNe1pRskkUApiTohq2QBL7v+x8Q0b5MoYsDg5qINtJlE0S0ktWu696TuezhLIZ+gO/73/YL2KWlpZ21Wm3VUHYNQd4ry3YnSfI9gAYzz4yPjz8N4FUAt0lNsta+h9nZ2dv7bV6tVmvXkfJr1aFLzCzF9U8iuhvAfVJ4xV3MHBljdvUdYa9BhX5LehbGdpXufNFae4GIDodheHhTgdI0PQZALqHTmSoST79aa483Go2jtVrtr00FSpJE+uODSqmFrGGft9b+vLy8fLZer19qZfj/dMu6XJYVRpXL5W4xxug4jqXUSBtZsVEA9dXgJtCgEPkX9Kg12hIEOYUAAAAASUVORK5CYII=", "code": "\n# encoding = utf-8\nimport json\nimport requests\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\n\ndef get_certname_facts_reports(certname, receive_time, server, token):\n  # setup the headers\n  headers = {'X-Authentication': token}\n  #setup the url\n  url = \"https://{}:8081/pdb/query/v4\".format(server)\n\n  facts_reports = {}\n  query_string = {}\n  query_string[\"query\"] = \"facts [name, value] { certname = \\\"%s\\\"}\" % certname\n  \n  certname_facts = json.loads(requests.post(url, json=query_string, headers=headers, verify=False).text)\n\n  facts_reports['facts'] = {}\n\n  for f in certname_facts:\n    facts_reports['facts'][f['name']] = f['value']\n\n\n  reports_query = {}\n  reports_query[\"query\"] = \"reports [receive_time, transaction_uuid, corrective_change, noop, noop_pending, hash, status, puppet_version, report_format, catalog_uuid, job_id, cached_catalog_status, configuration_version, environment, code_id, producer_timestamp, producer, start_time, end_time] {certname = \\\"%s\\\" and receive_time < \\\"%s\\\" order by receive_time desc limit 5}\" % (certname, receive_time)\n\n  certname_reports = json.loads(requests.post(url, json=reports_query, headers=headers, verify=False).text)\n\n  facts_reports['reports'] = {}\n\n  for r in certname_reports:\n    r_time = r['receive_time']\n    facts_reports['reports'][r_time] = r\n\n\n  return facts_reports\n\n\ndef get_resource_events(uuid, server, token):\n  # setup the headers\n  headers = {'X-Authentication': token}\n  #setup the url\n  url = \"https://{}:8081/pdb/query/v4\".format(server)\n\n  query_string = {}\n  query_string[\"query\"] = \"reports[hash, status, puppet_version, report_format, catalog_uuid, job_id, cached_catalog_status, configuration_version, environment, corrective_change, noop, noop_pending, certname, transaction_uuid, code_id, resource_events, producer_timestamp, producer, start_time, end_time, receive_time, logs] { transaction_uuid = \\\"%s\\\"}\" % uuid\n  \n  resource_events = json.loads(requests.post(url, json=query_string, headers=headers, verify=False).text)\n\n  return resource_events\n\ndef submit_to_splunk(detailed_report, splunk, hec):\n  # setup the headers\n  headers = {\"Authorization\" : \"Splunk {} \".format(hec) }\n  #setup the url\n  url = \"https://{}:8088/services/collector\".format(splunk)\n\n  report = {\n    'host': detailed_report['certname'],\n    'event': detailed_report\n  }\n\n  requests.post(url, json=report, headers=headers, verify=False)\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the setup parameters and prints them to the log\n    puppet_db_server = helper.get_global_setting(\"puppet_db_server\")\n    helper.log_info(\"puppet_db_server={}\".format(puppet_db_server))\n    auth_token = helper.get_global_setting(\"auth_token\")\n    helper.log_info(\"auth_token={}\".format(auth_token))\n    splunk_server = helper.get_global_setting(\"splunk_server\")\n    helper.log_info(\"splunk_server={}\".format(splunk_server))\n    hec_token = helper.get_global_setting(\"hec_token\")\n    helper.log_info(\"hec_token={}\".format(hec_token))\n    pe_console = helper.get_global_setting(\"pe_console\")\n    helper.log_info(\"pe_console={}\".format(pe_console))\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"Alert action build_detailed_report started.\")\n    \n    events = helper.get_events()\n    for event in events:\n        # helper.log_info(\"event={}\".format(event))\n        event_dict = event\n\n    #helper.log_info(event_dict)\n\n    event_content = json.loads(event_dict[\"_raw\"])\n\n    #helper.log_info(event_content)\n\n    uuid = event_content[\"transaction_uuid\"]\n\n    #helper.log_info(uuid)\n\n    puppet_db_server = helper.get_global_setting(\"puppet_db_server\")\n    auth_token = helper.get_global_setting(\"auth_token\")\n    splunk_server = helper.get_global_setting(\"splunk_server\")\n    hec_token = helper.get_global_setting(\"hec_token\")\n\n    pe_console = helper.get_global_setting(\"pe_console\") or puppet_db_server\n\n    #helper.log_info(uuid)\n\n    detailed_report = get_resource_events(uuid, puppet_db_server, auth_token)[0]\n    \n    certname = detailed_report['certname']\n    receive_time = detailed_report['receive_time']\n    \n    facts_reports = get_certname_facts_reports(certname, receive_time, puppet_db_server, auth_token)\n\n    detailed_report[\"facts\"] = facts_reports['facts']\n    detailed_report[\"reports\"] = facts_reports['reports']\n\n    detailed_report[\"url\"] = 'https://{}/#/inspect/report/{}/events'.format(pe_console, detailed_report[\"hash\"])\n    \n    # lets remember who generated that original report\n\n    detailed_report[\"puppetdb_callback_hostname\"] = event_content[\"puppetdb_callback_hostname\"]\n\n    submit_to_splunk(detailed_report, splunk_server, hec_token)\n\n    #helper.addevent(json.dumps(forensic_report), sourcetype=\"puppet:forensic_report\")\n    helper.writeevents(host=\"localhost\", source=\"localhost\")\n\n    return 0", "label": "Build Detailed Report", "description": "Builds a detailed Puppet run report from a summary Puppet run report", "uuid": "603a4e4c822e4dbfa6015e0978fbe6aa"}]}, "basic_builder": {"build_no": 3, "visible": true, "appname": "TA-puppet-report-viewer", "large_icon": "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", "tab_build_no": "12", "tab_version": "2.2.0", "author": "Puppet, Inc.", "theme": "#65A637", "version": "1.3.0", "friendly_name": "Puppet Report Viewer", "description": "Adds Views for Puppet and Bolt reports, along with adding custom alert actions to create generated detailed Puppet run reports for Puppet Enterprise customers.", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAD70lEQVRYR+2XTWwbRRTH338mm6ikgiaKibDj7G4O3Ir4uCCBoIcCgkpw6QkhJIREWz5Ei6hAQiBuHEqpgAOH3uidXoqgoB6QeuBDFVTADbzrjQW4br2lTVyXnZ2HnrWOjOPYTYnjHvouttazMz//3+dgYWGBqb9tK5VKfw9Ys2E/Q4DEsh1t9gkAKvs+GiBmrgP4kYhARHcCKI4SSJT5KgiCx4lI+75/BMArowY6FQTBkwLked4hpdS+UQJJDP1GRJ9mLnsCwP0CZIyZjqIo3rCoHbBRK6j7rbHWHgjD8CMiagf8UNkEqGdKM/MWIhoDcMEYczSKoreJKB0qjbjHdV0J5F72AIC9AKaJ6LK19sNyufzusJWSFO9p+Xx+xnGc/Uqp1wFMMPN5Zj7GzCe6X0jTNK1UKt9shHprAsnmuVxu6+Tk5EEA4i6xJoCl7oOZuREEgTd0oOyACdd139Jat6FWncvMy0EQbN0sIPJ9/y4AZ9c68CbQDaeQ67r3aq3P3BAuKxQKc47jvKSUenPkQPl8ft5xnDe01i9mM5NU9ahH2l8Jw7DV+zoMhUKh4DjOTPtZGIY/zc3NbddaPwRAM3Ol2Wyerlar59pr+hXGouM4B7XWe4honJlDZj7CzL93AwEwYRie7HruuK77AoBd7efMfIqIdiilHpOpQvYkopPW2s+iKDrdqnOe532yhisKAHYQkdSXc9ba58rl8hfrqDUTnufJXLW3A+gKgC0yjsqzTHVp7r8YY95ZXFw8Ic31n16HMLPORpHFJEn2VCqVL9cBI0tbQB1zVRtAGvRlIrpV3NYBdqZerz86cPwwxjwSRZFIPegy0M27CihN04+J6DgRXSWiOwA8A+CpTDFjjHl+Zchn5u+SJHlNa6201vsB7JYTrLVTYRheXKc6PRWK43hbHMftcUcXi8WdY2NjhwBsz5T6vA0kw9fXXTP1yxnE9d46VilUKpX+k0Tz8/NTSimJs2dFJWvtH51AGz3kDwSSP+z7/vtEdECuXcx8tfNe1pRskkUApiTohq2QBL7v+x8Q0b5MoYsDg5qINtJlE0S0ktWu696TuezhLIZ+gO/73/YL2KWlpZ21Wm3VUHYNQd4ry3YnSfI9gAYzz4yPjz8N4FUAt0lNsta+h9nZ2dv7bV6tVmvXkfJr1aFLzCzF9U8iuhvAfVJ4xV3MHBljdvUdYa9BhX5LehbGdpXufNFae4GIDodheHhTgdI0PQZALqHTmSoST79aa483Go2jtVrtr00FSpJE+uODSqmFrGGft9b+vLy8fLZer19qZfj/dMu6XJYVRpXL5W4xxug4jqXUSBtZsVEA9dXgJtCgEPkX9Kg12hIEOYUAAAAASUVORK5CYII="}}